
%token_prefix MK_
%token_type {mk_parser_token*}
%default_type {mk_ast_node*}
%extra_argument {mk_parser_status *status}
%name mk_

%include {
#include "language.inc.h"
}

%syntax_error {
	fprintf(stderr, "%s\n", status->scanner_state->start);
	status->status = MK_PARSING_FAILED;
	status->ret = NULL;
}

mk_language ::= mk_command(C) . {
	status->ret = C;
}

mk_command(R) ::= mk_open_db(I) . {
	R = I;
}

mk_command(R) ::= mk_insert(I) . {
	R = I;
}

mk_command(R) ::= mk_create_coll(I) . {
	R = I;
}

mk_command(R) ::= mk_drop_coll(I) . {
	R = I;
}

mk_open_db(R) ::= USE IDENTIFIER(I) . {
	R = mk_ret_open_db(I);
}

mk_insert(R) ::= INSERT INTO IDENTIFIER(I) VALUES PARENTHESES_OPEN mk_values_list(T) PARENTHESES_CLOSE . {
	R = mk_ret_insert(I, T);
}

mk_drop_coll(R) ::= DROP COLLECTION IDENTIFIER(I) . {
	R = mk_ret_drop_coll(I);
}

mk_create_coll(R) ::= CREATE COLLECTION IDENTIFIER(I) PARENTHESES_OPEN mk_create_coll_field_list(T) PARENTHESES_CLOSE . {
	R = mk_ret_create_coll(I, T);
}

mk_create_coll_field_list(R) ::= mk_create_coll_field_list(L) COMMA mk_create_coll_field(I) . {
	R = mk_ret_list(L, I);
}

mk_create_coll_field_list(R) ::= mk_create_coll_field(I) . {
	R = mk_ret_list(I, NULL);
}

mk_create_coll_field(R) ::= IDENTIFIER(I) . {
	R = mk_ret_coll_field_def(I);
}

mk_values_list(R) ::= mk_values_list(L) COMMA mk_expr(I) . {
	R = mk_ret_list(I, L);
}

mk_values_list(R) ::= mk_expr(I) . {
	R = mk_ret_list(I, NULL);
}

mk_expr(R) ::= INTEGER(I) . {
    R = mk_ret_literal(MK_AST_T_INTEGER, I);
}
